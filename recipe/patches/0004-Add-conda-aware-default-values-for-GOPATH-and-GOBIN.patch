From e74fcad63398a97f2cae3a2f1817c1b770cf0e4c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Patrick=20Sodr=C3=A9?= <psodre@gmail.com>
Date: Sun, 24 Jan 2021 23:52:48 -0500
Subject: [PATCH 4/6] Add conda-aware default values for GOPATH and GOBIN

These new defaults are to make integration with conda-build easier and
are only in effect if the environment variable CONDA_GO_COMPILER is
set to 1.

Here is the behavior for GOBIN:
  - (previous) If GOBIN environment variable is set, return that value.
  - (new) If CONDA_GO_COMPILER equals 1:
    - If CONDA_BUILD=1 and PREFIX is set, then GOBIN default value is
      set to $PREFIX/bin
    - If CONDA_PREFIX is set, then GOBIN default value is set to
      $CONDA_PREFIX/bin
  - (previous) Return "", which was the previous default value.

Here is the behavior for GOPATH:
  - (previous) If GOPATH environment is set, return that value
  - (new) If CONDA_GO_COMPILER equals 1:
    - If CONDA_BUILD=1 and SRC_DIR is set, then GOPATH default value is
      set to $SRC_DIR/gopath
  - (previous) Return "", which was the previous default value.

This change makes it so we don't have to rely on activate/deactivate
scripts for unix and windows. It also means, that the end-users can
override these defaults, which was not possible before while still
maintaining compatibilit with the current case.
---
 src/cmd/go/go_test.go                         | 33 +++++++++++++++++++
 src/cmd/go/internal/cfg/cfg.go                | 28 +++++++++++++++-
 .../gopath/src/go-cmd-test/helloworld.go      |  5 +++
 src/go/build/build.go                         | 19 ++++++++++-
 4 files changed, 83 insertions(+), 2 deletions(-)
 create mode 100644 src/cmd/go/testdata/gopath/src/go-cmd-test/helloworld.go

diff --git a/src/cmd/go/go_test.go b/src/cmd/go/go_test.go
index 1ea347ca6e..5723005eac 100644
--- a/src/cmd/go/go_test.go
+++ b/src/cmd/go/go_test.go
@@ -2888,3 +2888,36 @@ func TestMissingCC(t *testing.T) {
 		t.Error(`clearing "PATH" causes "net" to be stale`)
 	}
 }
+
+// Test that without $GOBIN set, binaries get installed
+// into the PREFIX/bin directory when CONDA_BUILD is 1.
+func TestInstallIntoGOBINWithCondaCompiler(t *testing.T) {
+	tg := testgo(t)
+	defer tg.cleanup()
+	tg.setenv("CONDA_GO_COMPILER", "1")
+	tg.setenv("CONDA_BUILD", "")
+	tg.makeTempdir()
+	prefix := filepath.Join(tg.tempdir, "testdata", "conda_prefix")
+	tg.creatingTemp(prefix)
+	tg.setenv("CONDA_PREFIX", prefix)
+	tg.setenv("GOPATH", filepath.Join(tg.pwd(), "testdata", "gopath"))
+	tg.run("install", "go-cmd-test")
+	tg.wantExecutable(filepath.Join(prefix, "bin/go-cmd-test"+exeSuffix), "go install go-cmd-test did not write to testdata/conda_prefix/bin/go-cmd-test")
+}
+
+// Test that without $GOBIN set, binaries get installed
+// into the PREFIX/bin directory when CONDA_BUILD is 1.
+func TestInstallIntoGOBINWithCondaBuild(t *testing.T) {
+	tg := testgo(t)
+	defer tg.cleanup()
+	tg.setenv("CONDA_GO_COMPILER", "1")
+	tg.setenv("CONDA_BUILD", "1")
+	tg.makeTempdir()
+	prefix := filepath.Join(tg.tempdir, "testdata", "conda_build_prefix")
+	tg.creatingTemp(prefix)
+	tg.setenv("PREFIX", prefix)
+	tg.setenv("SRC_DIR", filepath.Join(tg.pwd(), "testdata"))
+	tg.run("install", "go-cmd-test")
+	tg.wantExecutable(filepath.Join(prefix, "bin/go-cmd-test"+exeSuffix), "go install go-cmd-test did not write to testdata/conda_build_prefix/bin/go-cmd-test")
+}
+
diff --git a/src/cmd/go/internal/cfg/cfg.go b/src/cmd/go/internal/cfg/cfg.go
index 7d1d1f379f..22c7c37096 100644
--- a/src/cmd/go/internal/cfg/cfg.go
+++ b/src/cmd/go/internal/cfg/cfg.go
@@ -260,7 +260,7 @@ func CanGetenv(key string) bool {
 
 var (
 	GOROOT       = BuildContext.GOROOT
-	GOBIN        = Getenv("GOBIN")
+	GOBIN        = envOr("GOBIN", defaultCondaGOBIN())
 	GOROOTbin    = filepath.Join(GOROOT, "bin")
 	GOROOTpkg    = filepath.Join(GOROOT, "pkg")
 	GOROOTsrc    = filepath.Join(GOROOT, "src")
@@ -287,6 +287,32 @@ var (
 
 var SumdbDir = gopathDir("pkg/sumdb")
 
+// defaultCondaGOBIN returns a conda-aware GOBIN path if CONDA_GO_COMPILER
+// is set to 1, otherwise it returns the default empty-string.
+// When CONDA_GO_COMPILER is set to 1, GOBIN's default value is set to:
+//    - $PREFIX/bin if CONDA_BUILD is set to 1 and the PREFIX is set
+//    - $CONDA_PREFIX/bin if CONDA_BUILD is not set to 1 and CONDA_PREFIX is set
+//    - ""  the default value
+func defaultCondaGOBIN() string {
+	if envIsOne("CONDA_GO_COMPILER") {
+		prefixEnv := "CONDA_PREFIX"
+		if envIsOne("CONDA_BUILD") {
+			prefixEnv = "PREFIX"
+		}
+		if prefix, ok := os.LookupEnv(prefixEnv); ok {
+			return filepath.Join(prefix, "bin")
+		}
+	}
+	return ""
+}
+
+// envIsOne returns true if environment variable is set to 1, it
+// it returns false otherwise
+func envIsOne(name string) bool {
+	s := os.Getenv(name)
+	return s == "1"
+}
+
 // GetArchEnv returns the name and setting of the
 // GOARCH-specific architecture environment variable.
 // If the current architecture has no GOARCH-specific variable,
diff --git a/src/cmd/go/testdata/gopath/src/go-cmd-test/helloworld.go b/src/cmd/go/testdata/gopath/src/go-cmd-test/helloworld.go
new file mode 100644
index 0000000000..002a5c740c
--- /dev/null
+++ b/src/cmd/go/testdata/gopath/src/go-cmd-test/helloworld.go
@@ -0,0 +1,5 @@
+package main
+
+func main() {
+	println("hello world")
+}
diff --git a/src/go/build/build.go b/src/go/build/build.go
index dce0304ba4..012b4b60dc 100644
--- a/src/go/build/build.go
+++ b/src/go/build/build.go
@@ -276,6 +276,16 @@ func (ctxt *Context) SrcDirs() []string {
 // if set, or else the compiled code's GOARCH, GOOS, and GOROOT.
 var Default Context = defaultContext()
 
+func defaultCondaGOPATH() string {
+	if envIsOne("CONDA_GO_COMPILER") && envIsOne("CONDA_BUILD") {
+		if srcDir := os.Getenv("SRC_DIR"); srcDir != "" {
+			return filepath.Join(srcDir, "gopath")
+		}
+		return defaultGOPATH()
+	}
+	return defaultGOPATH()
+}
+
 func defaultGOPATH() string {
 	env := "HOME"
 	if runtime.GOOS == "windows" {
@@ -303,7 +313,7 @@ func defaultContext() Context {
 	c.GOARCH = buildcfg.GOARCH
 	c.GOOS = buildcfg.GOOS
 	c.GOROOT = pathpkg.Clean(runtime.GOROOT())
-	c.GOPATH = envOr("GOPATH", defaultGOPATH())
+	c.GOPATH = envOr("GOPATH", defaultCondaGOPATH())
 	c.Compiler = runtime.Compiler
 
 	// For each experiment that has been enabled in the toolchain, define a
@@ -358,6 +368,13 @@ func envOr(name, def string) string {
 	return s
 }
 
+// envIsOne returns true if environment variable is set to 1, it
+// it returns false otherwise
+func envIsOne(name string) bool {
+	s := os.Getenv(name)
+	return s == "1"
+}
+
 // An ImportMode controls the behavior of the Import method.
 type ImportMode uint
 
-- 
2.34.1

