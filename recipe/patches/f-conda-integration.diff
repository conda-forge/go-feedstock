diff --git a/misc/cgo/fortran/test.bash b/misc/cgo/fortran/test.bash
index 9498da0208..15ae1e93ce 100755
--- a/misc/cgo/fortran/test.bash
+++ b/misc/cgo/fortran/test.bash
@@ -20,11 +20,7 @@ fi
 
 case "$FC" in
 *gfortran*)
-  libpath=$(dirname $($FC -print-file-name=libgfortran.$libext))
-  if [ "$goos" != "aix" ]; then
-	  RPATH_FLAG="-Wl,-rpath,$libpath"
-  fi
-  export CGO_LDFLAGS="$CGO_LDFLAGS $RPATH_FLAG -L $libpath"
+  # CONDA's gfortran + go does not need changes to CGO_LDFLAGS
   ;;
 esac
 
diff --git a/src/cmd/go/go_test.go b/src/cmd/go/go_test.go
index f6caa01fd2..e687fbaeb7 100644
--- a/src/cmd/go/go_test.go
+++ b/src/cmd/go/go_test.go
@@ -1611,6 +1611,36 @@ func TestInstallIntoGOBIN(t *testing.T) {
 	tg.wantExecutable("testdata/bin1/go-cmd-test"+exeSuffix, "go install go-cmd-test did not write to testdata/bin1/go-cmd-test")
 }
 
+// Test that without $GOBIN set, binaries get installed
+// into the PREFIX/bin directory when CONDA_BUILD is 1.
+func TestInstallIntoGOBINWithCondaCompiler(t *testing.T) {
+	tg := testgo(t)
+	defer tg.cleanup()
+	tg.setenv("CONDA_GO_COMPILER", "1")
+	tg.setenv("CONDA_BUILD", "")
+	prefix := filepath.Join(tg.pwd(), "testdata", "conda_prefix")
+	tg.creatingTemp(prefix)
+	tg.setenv("CONDA_PREFIX", prefix)
+	tg.setenv("GOPATH", filepath.Join(tg.pwd(), "testdata"))
+	tg.run("install", "go-cmd-test")
+	tg.wantExecutable("testdata/conda_prefix/bin/go-cmd-test"+exeSuffix, "go install go-cmd-test did not write to testdata/conda_prefix/bin/go-cmd-test")
+}
+
+// Test that without $GOBIN set, binaries get installed
+// into the PREFIX/bin directory when CONDA_BUILD is 1.
+func TestInstallIntoGOBINWithCondaBuild(t *testing.T) {
+	tg := testgo(t)
+	defer tg.cleanup()
+	tg.setenv("CONDA_GO_COMPILER", "1")
+	tg.setenv("CONDA_BUILD", "1")
+	prefix := filepath.Join(tg.pwd(), "testdata", "conda_build_prefix")
+	tg.creatingTemp(prefix)
+	tg.setenv("PREFIX", prefix)
+	tg.setenv("SRC_DIR", filepath.Join(tg.pwd(), "testdata"))
+	tg.run("install", "go-cmd-test")
+	tg.wantExecutable("testdata/conda_build_prefix/bin/go-cmd-test"+exeSuffix, "go install go-cmd-test did not write to testdata/conda_build_prefix/bin/go-cmd-test")
+}
+
 // Issue 11065
 func TestInstallToCurrentDirectoryCreatesExecutable(t *testing.T) {
 	tg := testgo(t)
diff --git a/src/cmd/go/internal/cfg/cfg.go b/src/cmd/go/internal/cfg/cfg.go
index a3277a6c3f..3c0ec4b0bf 100644
--- a/src/cmd/go/internal/cfg/cfg.go
+++ b/src/cmd/go/internal/cfg/cfg.go
@@ -227,7 +227,7 @@ func CanGetenv(key string) bool {
 
 var (
 	GOROOT       = BuildContext.GOROOT
-	GOBIN        = Getenv("GOBIN")
+	GOBIN        = envOr("GOBIN", defaultCondaGOBIN())
 	GOROOTbin    = filepath.Join(GOROOT, "bin")
 	GOROOTpkg    = filepath.Join(GOROOT, "pkg")
 	GOROOTsrc    = filepath.Join(GOROOT, "src")
@@ -359,3 +359,30 @@ func isGOROOT(path string) bool {
 	}
 	return stat.IsDir()
 }
+
+// defaultCondaGOBIN returns a conda-aware GOBIN path if CONDA_GO_COMPILER
+// is set to 1, otherwise it returns the default empty-string.
+// When CONDA_GO_COMPILER is set to 1, GOBIN's default value is set to:
+//    - $PREFIX/bin if CONDA_BUILD is set to 1 and the PREFIX is set
+//    - $CONDA_PREFIX/bin if CONDA_BUILD is not set to 1 and CONDA_PREFIX is set
+//    - ""  the default value
+func defaultCondaGOBIN() string {
+	if envIsOne("CONDA_GO_COMPILER") {
+		prefixEnv := "CONDA_PREFIX"
+		if envIsOne("CONDA_BUILD") {
+			prefixEnv = "PREFIX"
+		}
+		if prefix, ok := os.LookupEnv(prefixEnv); ok {
+			return filepath.Join(prefix, "bin")
+		}
+	}
+	return ""
+}
+
+// envIsOne returns true if environment variable is set to 1, it
+// it returns false otherwise
+func envIsOne(name string) bool {
+	s := os.Getenv(name)
+	return s == "1"
+}
+
diff --git a/src/cmd/go/internal/work/exec.go b/src/cmd/go/internal/work/exec.go
index 892e3cb500..2d6c2d920a 100644
--- a/src/cmd/go/internal/work/exec.go
+++ b/src/cmd/go/internal/work/exec.go
@@ -2421,6 +2421,32 @@ func (b *Builder) gccArchArgs() []string {
 	return nil
 }
 
+// condaGetCompilerFlags returns the value of the given environment variable that is normally available when
+// using conda based compilers, or return the unmodified default no environment variable is found.
+// On linux, it will disable the linker's gc-sections option.
+// On mac/darwin, it will change/reset the macosx minimal version, and set the isysroot if available.
+func condaGetCompilerFlags(key, def string) string {
+	if value, ok := os.LookupEnv(key); ok {
+		switch cfg.Goos {
+		case "linux":
+			if key == "LDFLAGS" {
+				return value + " -Wl,--no-gc-sections"
+			}
+		case "darwin":
+			if key == "CPPFLAGS" {
+				if macosxDefaultTarget, ok := os.LookupEnv("MACOSX_DEFAULT_TARGET"); ok {
+					value = value + " -mmacosx-version-min=" + macosxDefaultTarget
+				}
+				if sysroot, ok := os.LookupEnv("CONDA_BUILD_SYSROOT"); ok {
+					value = value + " -isysroot " + sysroot
+				}
+			}
+		}
+		return value
+	}
+	return def
+}
+
 // envList returns the value of the given environment variable broken
 // into fields, using the default value when the variable is empty.
 func envList(key, def string) []string {
@@ -2458,7 +2484,7 @@ func buildFlags(name, defaults string, fromPackage []string, check func(string,
 	if err := check(name, "#cgo "+name, fromPackage); err != nil {
 		return nil, err
 	}
-	return str.StringList(envList("CGO_"+name, defaults), fromPackage), nil
+	return str.StringList(envList("CGO_"+name, condaGetCompilerFlags(name, defaults)), fromPackage), nil
 }
 
 var cgoRe = lazyregexp.New(`[/\\:]`)
diff --git a/src/cmd/go/script_test.go b/src/cmd/go/script_test.go
index 5e50dd14c7..fac73f2633 100644
--- a/src/cmd/go/script_test.go
+++ b/src/cmd/go/script_test.go
@@ -89,9 +89,14 @@ var extraEnvKeys = []string{
 	"WINDIR",             // must be preserved on Windows to be able to run PowerShell command; golang.org/issue/30711
 	"LD_LIBRARY_PATH",    // must be preserved on Unix systems to find shared libraries
 	"CC",                 // don't lose user settings when invoking cgo
+	"CFLAGS",             // conda-forge: don't lose user settings
+	"CPPFLAGS",           // conda-forge: don't lose user settings
+	"LDFLAGS",            // conda-forge: don't lose user settings
 	"GO_TESTING_GOTOOLS", // for gccgo testing
 	"GCCGO",              // for gccgo testing
 	"GCCGOTOOLDIR",       // for gccgo testing
+	"CONDA_BUILD_SYSROOT", // conda-forge: don't lose conda-build settings
+	"MACOSX_DEPLOYMENT_TARGET",  // conda-forge: don't lose conda-build settings
 }
 
 // setup sets up the test execution temporary directory and environment.
diff --git a/src/go/build/build.go b/src/go/build/build.go
index f8547606aa..aa7371e102 100644
--- a/src/go/build/build.go
+++ b/src/go/build/build.go
@@ -263,6 +263,12 @@ func (ctxt *Context) SrcDirs() []string {
 // if set, or else the compiled code's GOARCH, GOOS, and GOROOT.
 var Default Context = defaultContext()
 
+func defaultCondaGOPATH() string {
+	if envIsOne("CONDA_GO_COMPILER") && envIsOne("CONDA_BUILD") {
+		return envOr("SRC_DIR", defaultGOPATH())
+	}
+	return defaultGOPATH()
+}
 func defaultGOPATH() string {
 	env := "HOME"
 	if runtime.GOOS == "windows" {
@@ -290,7 +296,7 @@ func defaultContext() Context {
 	c.GOARCH = envOr("GOARCH", runtime.GOARCH)
 	c.GOOS = envOr("GOOS", runtime.GOOS)
 	c.GOROOT = pathpkg.Clean(runtime.GOROOT())
-	c.GOPATH = envOr("GOPATH", defaultGOPATH())
+	c.GOPATH = envOr("GOPATH", defaultCondaGOPATH())
 	c.Compiler = runtime.Compiler
 
 	// Each major Go release in the Go 1.x series adds a new
@@ -335,6 +341,14 @@ func envOr(name, def string) string {
 	return s
 }
 
+// envIsOne returns true if environment variable is set to 1, it
+// it returns false otherwise
+func envIsOne(name string) bool {
+	s := os.Getenv(name)
+	return s == "1"
+}
+
+
 // An ImportMode controls the behavior of the Import method.
 type ImportMode uint
 
