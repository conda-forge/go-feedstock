From f8cf88715e20f83816a2b53db6d26585bfb0b1b3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Patrick=20Sodr=C3=A9?= <psodre@gmail.com>
Date: Tue, 7 Apr 2020 23:02:19 -0400
Subject: [PATCH 1/7] Fix cgo_fortran test setup for conda

---
 .../cgo/internal/testfortran/fortran_test.go  | 40 +------------------
 1 file changed, 1 insertion(+), 39 deletions(-)

diff --git a/src/cmd/cgo/internal/testfortran/fortran_test.go b/src/cmd/cgo/internal/testfortran/fortran_test.go
index 0eae7c5..af8d5af 100644
--- a/src/cmd/cgo/internal/testfortran/fortran_test.go
+++ b/src/cmd/cgo/internal/testfortran/fortran_test.go
@@ -8,9 +8,6 @@ import (
 	"internal/testenv"
 	"os"
 	"os/exec"
-	"path/filepath"
-	"runtime"
-	"strings"
 	"testing"
 )
 
@@ -28,42 +25,7 @@ func TestFortran(t *testing.T) {
 	}
 
 	var fcExtra []string
-	if strings.Contains(fc, "gfortran") {
-		// TODO: This duplicates but also diverges from logic from cmd/go
-		// itself. For example, cmd/go merely adds -lgfortran without the extra
-		// library path work. If this is what's necessary to run gfortran, we
-		// should reconcile the logic here and in cmd/go.. Maybe this should
-		// become a cmd/go script test to share that logic.
-
-		// Add -m32 if we're targeting 386, in case this is a cross-compile.
-		if runtime.GOARCH == "386" {
-			fcExtra = append(fcExtra, "-m32")
-		}
-
-		// Find libgfortran. If the FORTRAN compiler isn't bundled
-		// with the C linker, this may be in a path the C linker can't
-		// find on its own. (See #14544)
-		libExt := "so"
-		switch runtime.GOOS {
-		case "darwin":
-			libExt = "dylib"
-		case "aix":
-			libExt = "a"
-		}
-		libPath, err := exec.Command(fc, append([]string{"-print-file-name=libgfortran." + libExt}, fcExtra...)...).CombinedOutput()
-		if err != nil {
-			t.Errorf("error invoking %s: %s", fc, err)
-		}
-		libDir := filepath.Dir(string(libPath))
-		cgoLDFlags := os.Getenv("CGO_LDFLAGS")
-		cgoLDFlags += " -L " + libDir
-		if runtime.GOOS != "aix" {
-			cgoLDFlags += " -Wl,-rpath," + libDir
-		}
-		t.Logf("CGO_LDFLAGS=%s", cgoLDFlags)
-		os.Setenv("CGO_LDFLAGS", cgoLDFlags)
-
-	}
+	// CONDA's gfortran + go does not need changes to CGO_LDFLAGS
 
 	// Do a test build that doesn't involve Go FORTRAN support.
 	fcArgs := append([]string{"testdata/helloworld/helloworld.f90", "-o", "/dev/null"}, fcExtra...)
