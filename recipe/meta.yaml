{% set name = "go" %}
{% set version = "1.13.5" %}

{% set cgo_var = "cgo" %}    # [cgo]
{% set cgo_int = "1" %}      # [cgo]
{% set cgo_var = "nocgo" %}  # [not cgo]
{% set cgo_int = "0" %}      # [not cgo]

package:
  name: {{ name }}
  version: {{ version }}

source:
  - url: https://dl.google.com/{{ name }}/go{{ version }}.src.tar.gz
    sha256: 27d356e2a0b30d9983b60a788cf225da5f914066b37a6b4f69d457ba55a626ff
    folder: go

build:
  number: 0
  binary_relocation: False
  detect_binary_files_with_prefix: False
  force_ignore_keys:    # [win]
    - c_compiler        # [win]
    - cxx_compiler      # [win]
    - fortran_compiler  # [win]
  # test data links to these DSOs
  missing_dso_whitelist:
    - /usr/lib/libSystem.B.dylib
    - /usr/lib/libgcc_s.1.dylib
    - libc.so.6

outputs:
  - name: {{ name }}-{{ cgo_var }}
    script: build-core.sh   # [not win]
    script: build-core.bat  # [win]
    requirements:
      build:
        - {{ compiler('go14') }}
        - {{ compiler('c') }}              # [unix and cgo]
        - {{ compiler('cxx') }}            # [unix and cgo]
        - {{ compiler('fortran') }}        # [unix and cgo]
        - {{ compiler('m2w64_c') }}        # [win and cgo]
        - {{ compiler('m2w64_cxx') }}      # [win and cgo]
        - {{ compiler('m2w64_fortran') }}  # [win and cgo]

        - perl     # [not win]
        - m2-sed   # [win]
        - m2-grep  # [win]
    test:
      requires:
        - {{ compiler('c') }}              # [unix and cgo]
        - {{ compiler('m2w64_c') }}        # [win and cgo]
      files:
        - hello.go
        - hello-c.go  # [cgo]
      commands:
        # Environment checks
        - go env
        - test $(go env GOROOT) = ${CONDA_PREFIX}/go         # [unix]
        - cmd /c if x%GOROOT% NEQ x%CONDA_PREFIX%\go exit 1  # [win]

        - test $(go env CGO_ENABLED) -eq {{ cgo_int }}  # [unix]
        # TODO: Add similar test with {{ cgo_int }} for  [win]

        # Test go can actually compile and run a basic program
        - go run hello.go

        # Test cgo is working properly
        - go run hello-c.go    # [cgo]

  - name: {{ name }}-{{ cgo_var }}_{{ target_platform }}   # [cgo]
  - name: {{ name }}-{{ cgo_var }}_{{ conda_goplatform }}  # [not cgo]
    script: build-{{ cgo_var }}-platform.sh   # [unix]
    script: build-{{ cgo_var }}-platform.bat  # [win]
    requirements:
      build:
        - sed      # [osx]
        - m2-sed   # [win]
      run:
        - {{ pin_subpackage("go-"+cgo_var, exact=True) }}
    test:
      files:
        - hello.go
        - hello-c.go
      requires:
        - {{ compiler('c') }}              # [unix and cgo]
        - {{ compiler('m2w64_c') }}        # [win and cgo]
        - posix    # [win]
        - m2-file  # [win]
        - m2-grep  # [win]
      commands:
        - go env

        # Check that the file types match what is expected for each platform
        ## https://stackoverflow.com/questions/2768608/batch-equivalent-of-bash-backticks#2768660
        - go build hello.go
        - file hello`go env GOEXE` | grep '{{ conda_gofile }}'  # [unix and not cgo]
        - for /f "usebackq tokens=*" %%a in (`go env GOEXE`) do file hello%%a | grep '{{ conda_gofile }}'  # [win and not cgo]

        - go build hello-c.go  # [cgo]

  - name: {{ name }}                                                        # [not cgo]
    requirements:                                                           # [not cgo]
      run:                                                                  # [not cgo]
        - {{ pin_subpackage(name+"-nocgo_"+target_platform, exact=True) }}  # [not cgo]
    test:                                                                   # [not cgo]
      commands:                                                             # [not cgo]
        - go version                                                        # [not cgo]


about:
  home: http://golang.org
  license: BSD-Style
  license_family: BSD
  license_file: go/LICENSE
  summary: 'The Go Programming Language'
  description: |
    Go is expressive, concise, clean, and efficient. Its concurrency mechanisms
    make it easy to write programs that get the most out of multicore and
    networked machines, while its novel type system enables flexible and
    modular program construction. Go compiles quickly to machine code yet has
    the convenience of garbage collection and the power of run-time reflection.
    It's a fast, statically typed, compiled language that feels like a
    dynamically typed, interpreted language.
  doc_url: https://golang.org/doc
  dev_url: https://go.googlesource.com/go

extra:
  recipe-maintainers:
    - nehaljwani
    - scopatz
    - sodre
    - stuarteberg
